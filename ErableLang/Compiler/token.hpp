#ifndef _ERABLE_COMPILER_TOKEN_HPP_
#define _ERABLE_COMPILER_TOKEN_HPP_

#include <string>

typedef enum
{
	// 未知的 Token
	TOKEN_UNKNOWN,
	TOKEN_NUMBER,

	// 数据
	TOKEN_STRING,
	TOKEN_ID,
	TOKEN_INTERPOLATION,

	// 关键字
	TOKEN_LET,
	TOEKN_CONST,
	TOKEN_FUNCTIN,
	TOKEN_IF,
	TOKEN_ELSE,
	TOKEN_SWITCH,
	TOKEN_CASE,
	TOKEN_DEFAULT,
	TOKEN_TRUE,
	TOKEN_FALSE,
	TOKEN_WHILE,
	TOKEN_FOR,
	TOKEN_IN,
	TOKEN_OF,
	TOKEN_BREAK,
	TOKEN_CONTINUE,
	TOKEN_RETURN,
	TOKEN_NULL,

	TOKEN_NATIVE,
	TOKEN_YIELDS,

	// 关于类和模块的关键字
	TOKEN_CLASS,
	TOKEN_NEW,
	TOKEN_AS,
	TOKEN_THIS,
	TOKEN_SUPER,
	TOKEN_LOAD,
	TOKEN_EXTENDS,

	// 分隔符
	TOKEN_COMMA,
	TOKEN_COLON,
	TOKEN_LEFT_PAREN,
	TOKEN_RIGHT_PAREN,
	TOKEN_LEFT_BRACKET,
	TOKEN_RIGHT_BRACKET,
	TOKEN_LEFT_BRACE,
	TOKEN_RIGHT_BRACE,
	TOKEN_DOT,
	TOKEN_DOT_DOT,

	// 双目算术运算符
	TOKEN_ADD,
	TOKEN_SUB,
	TOKEN_MUL,
	TOKEN_DIV,
	TOKEN_MOD,
	TOKEN_POW,

	// 赋值运算符
	TOKEN_ASSIGN,

	// 位运算符
	TOKEN_BIT_AND,
	TOKEN_BIT_OR,
	TOKEN_BIT_NOT,
	TOKEN_BIT_SHIFT_RIGHT,
	TOKEN_BIT_SHIFT_KEFT,

	// 逻辑运算符
	TOKEN_LOGIC_AND,
	TOKEN_LOGIC_OR,
	TOKEN_LOGIC_NOT,

	// 关系操作符
	TOKEN_EQUAL,
	TOKEN_NOT_EQUAL,
	TOKEN_GREATE,
	TOKEN_GREATE_EQUAL,
	TOKEN_LESS,
	TOKEN_LESS_EQUAL,

	TOKEN_QUESTION,

	// 文件结束标记
	// 仅词法分析时使用
	TOKEN_EOF
} TokenType;

struct Token
{
	TokenType type;
	char* start;
	uint32_t length;
	uint32_t lineNo;
}


#endif // !_ERABLE_COMPILER_TOKEN_HPP_

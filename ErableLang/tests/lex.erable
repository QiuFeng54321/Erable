//Erable Lexer Test by Qiufeng54321
/*
    This is a block comment
    Licensed by GPL v3
*/

integral int(32) { //Specify the total bit it occupies
    SIGN : 1,
    AVAIL : 31
}
integral uint(32) {
    AVAIL : 32
}
integral double { //Can also let the compiler deduct it itself
    SIGN : 1,
    AVAIL : 63
}


var a : int = 0;
const b : String = "hello";
var pi : udouble = 3.14159265358979323846264338327950288419716939937510;
var magic : int = 0xe4ab1e;
var whilecond : bool = false;
/*
    While Statement
*/
while(whilecond){
    a += a;
}

/*
    Global Function
*/
function fibonacci(count : int) -> int {

}

class B {
    abstract function add <type A, type B, type C = A + B > (a: A, b: B) -> C {
        return a + b;
    }
}

class A : B {
    var a: int = 0;
    init(aVal: int){
        this.a = aVal;
    }
    override function add <int, int>(int a, int b) {
        return a + b;
    }
}

class Shape {
    private var width: double;
    private var height: double;
    init(width: double, height: double) {
        this.width = width;
        this.height = height;
    }
    abstract function area() -> double;
    abstract function perimeter() -> double;
}

class Rectangle : Shape {
    override function area() { //Overriding functions don't need to specify the return type when there are no more than 1 overload functions
        return this.width * this.height;
    }
    override function perimeter() {
        return 2 * (this.width + this.height);
    }
}

var state : integral(2) = 0b11;
